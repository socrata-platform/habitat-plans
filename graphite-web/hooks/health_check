#!{{pkgPathFor "core/bash"}}/bin/bash

PID_FILE="{{pkg.svc_path}}/PID"
EXIT_STATUS=0
WARNING=()
CRITICAL=()
UNKNOWN=()

critical() {
  local msg="$1"
  CRITICAL+=("CRITCAL: $msg")
}

warning() {
  local msg="$1"
  WARNING+=("Warning: $msg")
}

unknown() {
  local msg="$1"
  UNKNOWN+=("Unknown: $msg")
}

pid() {
  cat $PID_FILE
}

check_port() {
  local port="$1"
  local local_addr="0.0.0.0"
  local local_addr="0.0.0.0"
  local foreign_addr="0.0.0.0"

  netstat -pant 2> /dev/null | \
    grep -E "^tcp\\W+[0-9]+\\W+[0-9]+\\W+${local_addr}:${port}\\W+${foreign_addr}:\\*\\W+LISTEN\\W+$(pid)/graphite-web$" > /dev/null

  return $?
}

check_ports() {
  if ! check_port {{cfg.system.port}}; then
    critical "PID $(pid) is not listening on TCP port {{cfg.system.port}}"
  fi
}

check_worker_processes() {
  local expected=$(({{cfg.system.workers}} + 1))
  local found=$(pgrep graphite-web | wc -l)
  if [ $found != $expected ]; then
    critical "Found ${found} graphite-web processes instead of the expected ${expected}"
  fi
}

process_check_output() {
  if [ ${#UNKNOWN[@]} -gt 0 ]; then
    EXIT_STATUS=3
    for unknown in "${UNKNOWN[@]}"; do
      echo "$unknown"
    done
  fi

  if [ ${#WARNING[@]} -gt 0 ]; then
    EXIT_STATUS=1
    for warn in "${WARNING[@]}"; do
      echo "$warn"
    done
  fi

  if [ ${#CRITICAL[@]} -gt 0 ]; then
    EXIT_STATUS=2
    for crit in "${CRITICAL[@]}"; do
      echo "$crit"
    done
  fi

  if [ $EXIT_STATUS = 0 ]; then
    echo "OK: All health checks are passing"
  fi
}

main() {
  if [ ! -e "$PID_FILE" ]; then
    echo "Unknown: PID file not found; is graphite-web running?"
    return 3
  fi

  check_ports
  check_worker_processes

  process_check_output

  return $EXIT_STATUS
}

main

exit $?
